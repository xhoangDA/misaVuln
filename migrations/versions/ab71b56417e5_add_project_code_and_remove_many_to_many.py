"""add_project_code_and_remove_many_to_many

Revision ID: ab71b56417e5
Revises: a00e73f446ee
Create Date: 2025-06-12 23:04:52.991514

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'ab71b56417e5'
down_revision = 'a00e73f446ee'
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    inspector = sa.inspect(connection)

    # Check and drop the project_technology table if it exists
    if 'project_technology' in inspector.get_table_names():
        op.drop_table('project_technology')

    with op.batch_alter_table('project', schema=None) as batch_op:
        # Check if project_code column exists before adding
        existing_columns = [col['name'] for col in inspector.get_columns('project')]
        if 'project_code' not in existing_columns:
            batch_op.add_column(sa.Column('project_code', sa.String(length=20), nullable=True))

    # Update project_code values for existing projects
    connection.execute(sa.text("UPDATE project SET project_code = CONCAT('PRJ', LPAD(id, 3, '0')) WHERE project_code IS NULL"))

    # Alter project_code to NOT NULL and add unique constraint
    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.alter_column('project_code', 
                              existing_type=sa.String(length=20),
                              nullable=False)
        batch_op.create_unique_constraint(None, ['project_code'])

    with op.batch_alter_table('technology', schema=None) as batch_op:
        # Check if project_name column exists before dropping
        existing_columns = [col['name'] for col in inspector.get_columns('technology')]
        if 'project_name' in existing_columns:
            batch_op.drop_column('project_name')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('technology', schema=None) as batch_op:
        batch_op.add_column(sa.Column('project_name', mysql.VARCHAR(length=100), nullable=True))

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')
        batch_op.drop_column('project_code')

    op.create_table('project_technology',
    sa.Column('project_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('technology_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], name=op.f('project_technology_ibfk_1')),
    sa.ForeignKeyConstraint(['technology_id'], ['technology.id'], name=op.f('project_technology_ibfk_2')),
    sa.PrimaryKeyConstraint('project_id', 'technology_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    # ### end Alembic commands ###
